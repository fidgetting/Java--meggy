
/*
 * visitor.h
 *
 * This file is automatically generated, do not change. If a change to this
 * file is needed, please change nodes.in instead.
 */

#ifndef VISITOR_H_INCLUDE
#define VISITOR_H_INCLUDE

#include <node.hpp>

struct visitor {
  public:

    visitor() { }
    virtual ~visitor() { }

    inline virtual void default_v(__node* node) { /* do nothing */}

    inline virtual void token_v(token* node) { default_v(node); }
    inline virtual void formal_v(formal* node) { default_v(node); }
    inline virtual void main_c_v(main_c* node) { default_v(node); }
    inline virtual void var_de_v(var_de* node) { default_v(node); }
    inline virtual void method_de_v(method_de* node) { default_v(node); }
    inline virtual void class_de_v(class_de* node) { default_v(node); }
    inline virtual void program_v(program* node) { default_v(node); }
    inline virtual void minus_e_v(minus_e* node) { default_v(node); }
    inline virtual void equal_e_v(equal_e* node) { default_v(node); }
    inline virtual void plus_e_v(plus_e* node) { default_v(node); }
    inline virtual void mul_e_v(mul_e* node) { default_v(node); }
    inline virtual void and_e_v(and_e* node) { default_v(node); }
    inline virtual void lt_e_v(lt_e* node) { default_v(node); }
    inline virtual void array_e_v(array_e* node) { default_v(node); }
    inline virtual void button_e_v(button_e* node) { default_v(node); }
    inline virtual void call_e_v(call_e* node) { default_v(node); }
    inline virtual void cast_e_v(cast_e* node) { default_v(node); }
    inline virtual void color_e_v(color_e* node) { default_v(node); }
    inline virtual void id_e_v(id_e* node) { default_v(node); }
    inline virtual void int_e_v(int_e* node) { default_v(node); }
    inline virtual void length_e_v(length_e* node) { default_v(node); }
    inline virtual void new_array_e_v(new_array_e* node) { default_v(node); }
    inline virtual void new_e_v(new_e* node) { default_v(node); }
    inline virtual void not_e_v(not_e* node) { default_v(node); }
    inline virtual void tone_e_v(tone_e* node) { default_v(node); }
    inline virtual void false_e_v(false_e* node) { default_v(node); }
    inline virtual void true_e_v(true_e* node) { default_v(node); }
    inline virtual void this_e_v(this_e* node) { default_v(node); }
    inline virtual void array_asn_s_v(array_asn_s* node) { default_v(node); }
    inline virtual void asn_s_v(asn_s* node) { default_v(node); }
    inline virtual void block_s_v(block_s* node) { default_v(node); }
    inline virtual void call_s_v(call_s* node) { default_v(node); }
    inline virtual void if_s_v(if_s* node) { default_v(node); }
    inline virtual void while_s_v(while_s* node) { default_v(node); }
    inline virtual void bool_t_v(bool_t* node) { default_v(node); }
    inline virtual void button_t_v(button_t* node) { default_v(node); }
    inline virtual void byte_t_v(byte_t* node) { default_v(node); }
    inline virtual void color_t_v(color_t* node) { default_v(node); }
    inline virtual void int_t_v(int_t* node) { default_v(node); }
    inline virtual void tone_t_v(tone_t* node) { default_v(node); }
    inline virtual void void_t_v(void_t* node) { default_v(node); }
    inline virtual void array_t_v(array_t* node) { default_v(node); }
    inline virtual void class_t_v(class_t* node) { default_v(node); }
    inline virtual void m_button_e_v(m_button_e* node) { default_v(node); }
    inline virtual void m_pixel_g_e_v(m_pixel_g_e* node) { default_v(node); }
    inline virtual void m_aux_s_v(m_aux_s* node) { default_v(node); }
    inline virtual void m_pixel_s_v(m_pixel_s* node) { default_v(node); }
    inline virtual void m_tone_s_v(m_tone_s* node) { default_v(node); }
    inline virtual void m_delay_s_v(m_delay_s* node) { default_v(node); }
};


struct depth_first_visitor : public visitor{
  public:

    depth_first_visitor() { }
    virtual ~depth_first_visitor() { }

    inline virtual void default_in (__node* node) { /* do nothing */ }
    inline virtual void default_out(__node* node) { /* do nothing */ }
    
    inline virtual void token_in (token* node) { default_in(node);  }
    inline virtual void token_out(token* node) { default_out(node); }
           virtual void token_v  (token* node);
    inline virtual void formal_in (formal* node) { default_in (node); }
    inline virtual void formal_out(formal* node) { default_out(node); }
           virtual void formal_v  (formal* node);
    inline virtual void main_c_in (main_c* node) { default_in (node); }
    inline virtual void main_c_out(main_c* node) { default_out(node); }
           virtual void main_c_v  (main_c* node);
    inline virtual void var_de_in (var_de* node) { default_in (node); }
    inline virtual void var_de_out(var_de* node) { default_out(node); }
           virtual void var_de_v  (var_de* node);
    inline virtual void method_de_in (method_de* node) { default_in (node); }
    inline virtual void method_de_out(method_de* node) { default_out(node); }
           virtual void method_de_v  (method_de* node);
    inline virtual void class_de_in (class_de* node) { default_in (node); }
    inline virtual void class_de_out(class_de* node) { default_out(node); }
           virtual void class_de_v  (class_de* node);
    inline virtual void program_in (program* node) { default_in (node); }
    inline virtual void program_out(program* node) { default_out(node); }
           virtual void program_v  (program* node);
    inline virtual void minus_e_in (minus_e* node) { default_in (node); }
    inline virtual void minus_e_out(minus_e* node) { default_out(node); }
           virtual void minus_e_v  (minus_e* node);
    inline virtual void equal_e_in (equal_e* node) { default_in (node); }
    inline virtual void equal_e_out(equal_e* node) { default_out(node); }
           virtual void equal_e_v  (equal_e* node);
    inline virtual void plus_e_in (plus_e* node) { default_in (node); }
    inline virtual void plus_e_out(plus_e* node) { default_out(node); }
           virtual void plus_e_v  (plus_e* node);
    inline virtual void mul_e_in (mul_e* node) { default_in (node); }
    inline virtual void mul_e_out(mul_e* node) { default_out(node); }
           virtual void mul_e_v  (mul_e* node);
    inline virtual void and_e_in (and_e* node) { default_in (node); }
    inline virtual void and_e_out(and_e* node) { default_out(node); }
           virtual void and_e_v  (and_e* node);
    inline virtual void lt_e_in (lt_e* node) { default_in (node); }
    inline virtual void lt_e_out(lt_e* node) { default_out(node); }
           virtual void lt_e_v  (lt_e* node);
    inline virtual void array_e_in (array_e* node) { default_in (node); }
    inline virtual void array_e_out(array_e* node) { default_out(node); }
           virtual void array_e_v  (array_e* node);
    inline virtual void button_e_in (button_e* node) { default_in (node); }
    inline virtual void button_e_out(button_e* node) { default_out(node); }
           virtual void button_e_v  (button_e* node);
    inline virtual void call_e_in (call_e* node) { default_in (node); }
    inline virtual void call_e_out(call_e* node) { default_out(node); }
           virtual void call_e_v  (call_e* node);
    inline virtual void cast_e_in (cast_e* node) { default_in (node); }
    inline virtual void cast_e_out(cast_e* node) { default_out(node); }
           virtual void cast_e_v  (cast_e* node);
    inline virtual void color_e_in (color_e* node) { default_in (node); }
    inline virtual void color_e_out(color_e* node) { default_out(node); }
           virtual void color_e_v  (color_e* node);
    inline virtual void id_e_in (id_e* node) { default_in (node); }
    inline virtual void id_e_out(id_e* node) { default_out(node); }
           virtual void id_e_v  (id_e* node);
    inline virtual void int_e_in (int_e* node) { default_in (node); }
    inline virtual void int_e_out(int_e* node) { default_out(node); }
           virtual void int_e_v  (int_e* node);
    inline virtual void length_e_in (length_e* node) { default_in (node); }
    inline virtual void length_e_out(length_e* node) { default_out(node); }
           virtual void length_e_v  (length_e* node);
    inline virtual void new_array_e_in (new_array_e* node) { default_in (node); }
    inline virtual void new_array_e_out(new_array_e* node) { default_out(node); }
           virtual void new_array_e_v  (new_array_e* node);
    inline virtual void new_e_in (new_e* node) { default_in (node); }
    inline virtual void new_e_out(new_e* node) { default_out(node); }
           virtual void new_e_v  (new_e* node);
    inline virtual void not_e_in (not_e* node) { default_in (node); }
    inline virtual void not_e_out(not_e* node) { default_out(node); }
           virtual void not_e_v  (not_e* node);
    inline virtual void tone_e_in (tone_e* node) { default_in (node); }
    inline virtual void tone_e_out(tone_e* node) { default_out(node); }
           virtual void tone_e_v  (tone_e* node);
    inline virtual void false_e_in (false_e* node) { default_in (node); }
    inline virtual void false_e_out(false_e* node) { default_out(node); }
           virtual void false_e_v  (false_e* node);
    inline virtual void true_e_in (true_e* node) { default_in (node); }
    inline virtual void true_e_out(true_e* node) { default_out(node); }
           virtual void true_e_v  (true_e* node);
    inline virtual void this_e_in (this_e* node) { default_in (node); }
    inline virtual void this_e_out(this_e* node) { default_out(node); }
           virtual void this_e_v  (this_e* node);
    inline virtual void array_asn_s_in (array_asn_s* node) { default_in (node); }
    inline virtual void array_asn_s_out(array_asn_s* node) { default_out(node); }
           virtual void array_asn_s_v  (array_asn_s* node);
    inline virtual void asn_s_in (asn_s* node) { default_in (node); }
    inline virtual void asn_s_out(asn_s* node) { default_out(node); }
           virtual void asn_s_v  (asn_s* node);
    inline virtual void block_s_in (block_s* node) { default_in (node); }
    inline virtual void block_s_out(block_s* node) { default_out(node); }
           virtual void block_s_v  (block_s* node);
    inline virtual void call_s_in (call_s* node) { default_in (node); }
    inline virtual void call_s_out(call_s* node) { default_out(node); }
           virtual void call_s_v  (call_s* node);
    inline virtual void if_s_in (if_s* node) { default_in (node); }
    inline virtual void if_s_out(if_s* node) { default_out(node); }
           virtual void if_s_v  (if_s* node);
    inline virtual void while_s_in (while_s* node) { default_in (node); }
    inline virtual void while_s_out(while_s* node) { default_out(node); }
           virtual void while_s_v  (while_s* node);
    inline virtual void bool_t_in (bool_t* node) { default_in (node); }
    inline virtual void bool_t_out(bool_t* node) { default_out(node); }
           virtual void bool_t_v  (bool_t* node);
    inline virtual void button_t_in (button_t* node) { default_in (node); }
    inline virtual void button_t_out(button_t* node) { default_out(node); }
           virtual void button_t_v  (button_t* node);
    inline virtual void byte_t_in (byte_t* node) { default_in (node); }
    inline virtual void byte_t_out(byte_t* node) { default_out(node); }
           virtual void byte_t_v  (byte_t* node);
    inline virtual void color_t_in (color_t* node) { default_in (node); }
    inline virtual void color_t_out(color_t* node) { default_out(node); }
           virtual void color_t_v  (color_t* node);
    inline virtual void int_t_in (int_t* node) { default_in (node); }
    inline virtual void int_t_out(int_t* node) { default_out(node); }
           virtual void int_t_v  (int_t* node);
    inline virtual void tone_t_in (tone_t* node) { default_in (node); }
    inline virtual void tone_t_out(tone_t* node) { default_out(node); }
           virtual void tone_t_v  (tone_t* node);
    inline virtual void void_t_in (void_t* node) { default_in (node); }
    inline virtual void void_t_out(void_t* node) { default_out(node); }
           virtual void void_t_v  (void_t* node);
    inline virtual void array_t_in (array_t* node) { default_in (node); }
    inline virtual void array_t_out(array_t* node) { default_out(node); }
           virtual void array_t_v  (array_t* node);
    inline virtual void class_t_in (class_t* node) { default_in (node); }
    inline virtual void class_t_out(class_t* node) { default_out(node); }
           virtual void class_t_v  (class_t* node);
    inline virtual void m_button_e_in (m_button_e* node) { default_in (node); }
    inline virtual void m_button_e_out(m_button_e* node) { default_out(node); }
           virtual void m_button_e_v  (m_button_e* node);
    inline virtual void m_pixel_g_e_in (m_pixel_g_e* node) { default_in (node); }
    inline virtual void m_pixel_g_e_out(m_pixel_g_e* node) { default_out(node); }
           virtual void m_pixel_g_e_v  (m_pixel_g_e* node);
    inline virtual void m_aux_s_in (m_aux_s* node) { default_in (node); }
    inline virtual void m_aux_s_out(m_aux_s* node) { default_out(node); }
           virtual void m_aux_s_v  (m_aux_s* node);
    inline virtual void m_pixel_s_in (m_pixel_s* node) { default_in (node); }
    inline virtual void m_pixel_s_out(m_pixel_s* node) { default_out(node); }
           virtual void m_pixel_s_v  (m_pixel_s* node);
    inline virtual void m_tone_s_in (m_tone_s* node) { default_in (node); }
    inline virtual void m_tone_s_out(m_tone_s* node) { default_out(node); }
           virtual void m_tone_s_v  (m_tone_s* node);
    inline virtual void m_delay_s_in (m_delay_s* node) { default_in (node); }
    inline virtual void m_delay_s_out(m_delay_s* node) { default_out(node); }
           virtual void m_delay_s_v  (m_delay_s* node);
};


struct reverse_first_visitor : public visitor{
  public:

    reverse_first_visitor() { }
    virtual ~reverse_first_visitor() { }

    inline virtual void default_in (__node* node) { /* do nothing */ }
    inline virtual void default_out(__node* node) { /* do nothing */ }
    
    inline virtual void token_in (token* node) { default_in(node);  }
    inline virtual void token_out(token* node) { default_out(node); }
           virtual void token_v  (token* node);
    inline virtual void formal_in (formal* node) { default_in (node); }
    inline virtual void formal_out(formal* node) { default_out(node); }
           virtual void formal_v  (formal* node);
    inline virtual void main_c_in (main_c* node) { default_in (node); }
    inline virtual void main_c_out(main_c* node) { default_out(node); }
           virtual void main_c_v  (main_c* node);
    inline virtual void var_de_in (var_de* node) { default_in (node); }
    inline virtual void var_de_out(var_de* node) { default_out(node); }
           virtual void var_de_v  (var_de* node);
    inline virtual void method_de_in (method_de* node) { default_in (node); }
    inline virtual void method_de_out(method_de* node) { default_out(node); }
           virtual void method_de_v  (method_de* node);
    inline virtual void class_de_in (class_de* node) { default_in (node); }
    inline virtual void class_de_out(class_de* node) { default_out(node); }
           virtual void class_de_v  (class_de* node);
    inline virtual void program_in (program* node) { default_in (node); }
    inline virtual void program_out(program* node) { default_out(node); }
           virtual void program_v  (program* node);
    inline virtual void minus_e_in (minus_e* node) { default_in (node); }
    inline virtual void minus_e_out(minus_e* node) { default_out(node); }
           virtual void minus_e_v  (minus_e* node);
    inline virtual void equal_e_in (equal_e* node) { default_in (node); }
    inline virtual void equal_e_out(equal_e* node) { default_out(node); }
           virtual void equal_e_v  (equal_e* node);
    inline virtual void plus_e_in (plus_e* node) { default_in (node); }
    inline virtual void plus_e_out(plus_e* node) { default_out(node); }
           virtual void plus_e_v  (plus_e* node);
    inline virtual void mul_e_in (mul_e* node) { default_in (node); }
    inline virtual void mul_e_out(mul_e* node) { default_out(node); }
           virtual void mul_e_v  (mul_e* node);
    inline virtual void and_e_in (and_e* node) { default_in (node); }
    inline virtual void and_e_out(and_e* node) { default_out(node); }
           virtual void and_e_v  (and_e* node);
    inline virtual void lt_e_in (lt_e* node) { default_in (node); }
    inline virtual void lt_e_out(lt_e* node) { default_out(node); }
           virtual void lt_e_v  (lt_e* node);
    inline virtual void array_e_in (array_e* node) { default_in (node); }
    inline virtual void array_e_out(array_e* node) { default_out(node); }
           virtual void array_e_v  (array_e* node);
    inline virtual void button_e_in (button_e* node) { default_in (node); }
    inline virtual void button_e_out(button_e* node) { default_out(node); }
           virtual void button_e_v  (button_e* node);
    inline virtual void call_e_in (call_e* node) { default_in (node); }
    inline virtual void call_e_out(call_e* node) { default_out(node); }
           virtual void call_e_v  (call_e* node);
    inline virtual void cast_e_in (cast_e* node) { default_in (node); }
    inline virtual void cast_e_out(cast_e* node) { default_out(node); }
           virtual void cast_e_v  (cast_e* node);
    inline virtual void color_e_in (color_e* node) { default_in (node); }
    inline virtual void color_e_out(color_e* node) { default_out(node); }
           virtual void color_e_v  (color_e* node);
    inline virtual void id_e_in (id_e* node) { default_in (node); }
    inline virtual void id_e_out(id_e* node) { default_out(node); }
           virtual void id_e_v  (id_e* node);
    inline virtual void int_e_in (int_e* node) { default_in (node); }
    inline virtual void int_e_out(int_e* node) { default_out(node); }
           virtual void int_e_v  (int_e* node);
    inline virtual void length_e_in (length_e* node) { default_in (node); }
    inline virtual void length_e_out(length_e* node) { default_out(node); }
           virtual void length_e_v  (length_e* node);
    inline virtual void new_array_e_in (new_array_e* node) { default_in (node); }
    inline virtual void new_array_e_out(new_array_e* node) { default_out(node); }
           virtual void new_array_e_v  (new_array_e* node);
    inline virtual void new_e_in (new_e* node) { default_in (node); }
    inline virtual void new_e_out(new_e* node) { default_out(node); }
           virtual void new_e_v  (new_e* node);
    inline virtual void not_e_in (not_e* node) { default_in (node); }
    inline virtual void not_e_out(not_e* node) { default_out(node); }
           virtual void not_e_v  (not_e* node);
    inline virtual void tone_e_in (tone_e* node) { default_in (node); }
    inline virtual void tone_e_out(tone_e* node) { default_out(node); }
           virtual void tone_e_v  (tone_e* node);
    inline virtual void false_e_in (false_e* node) { default_in (node); }
    inline virtual void false_e_out(false_e* node) { default_out(node); }
           virtual void false_e_v  (false_e* node);
    inline virtual void true_e_in (true_e* node) { default_in (node); }
    inline virtual void true_e_out(true_e* node) { default_out(node); }
           virtual void true_e_v  (true_e* node);
    inline virtual void this_e_in (this_e* node) { default_in (node); }
    inline virtual void this_e_out(this_e* node) { default_out(node); }
           virtual void this_e_v  (this_e* node);
    inline virtual void array_asn_s_in (array_asn_s* node) { default_in (node); }
    inline virtual void array_asn_s_out(array_asn_s* node) { default_out(node); }
           virtual void array_asn_s_v  (array_asn_s* node);
    inline virtual void asn_s_in (asn_s* node) { default_in (node); }
    inline virtual void asn_s_out(asn_s* node) { default_out(node); }
           virtual void asn_s_v  (asn_s* node);
    inline virtual void block_s_in (block_s* node) { default_in (node); }
    inline virtual void block_s_out(block_s* node) { default_out(node); }
           virtual void block_s_v  (block_s* node);
    inline virtual void call_s_in (call_s* node) { default_in (node); }
    inline virtual void call_s_out(call_s* node) { default_out(node); }
           virtual void call_s_v  (call_s* node);
    inline virtual void if_s_in (if_s* node) { default_in (node); }
    inline virtual void if_s_out(if_s* node) { default_out(node); }
           virtual void if_s_v  (if_s* node);
    inline virtual void while_s_in (while_s* node) { default_in (node); }
    inline virtual void while_s_out(while_s* node) { default_out(node); }
           virtual void while_s_v  (while_s* node);
    inline virtual void bool_t_in (bool_t* node) { default_in (node); }
    inline virtual void bool_t_out(bool_t* node) { default_out(node); }
           virtual void bool_t_v  (bool_t* node);
    inline virtual void button_t_in (button_t* node) { default_in (node); }
    inline virtual void button_t_out(button_t* node) { default_out(node); }
           virtual void button_t_v  (button_t* node);
    inline virtual void byte_t_in (byte_t* node) { default_in (node); }
    inline virtual void byte_t_out(byte_t* node) { default_out(node); }
           virtual void byte_t_v  (byte_t* node);
    inline virtual void color_t_in (color_t* node) { default_in (node); }
    inline virtual void color_t_out(color_t* node) { default_out(node); }
           virtual void color_t_v  (color_t* node);
    inline virtual void int_t_in (int_t* node) { default_in (node); }
    inline virtual void int_t_out(int_t* node) { default_out(node); }
           virtual void int_t_v  (int_t* node);
    inline virtual void tone_t_in (tone_t* node) { default_in (node); }
    inline virtual void tone_t_out(tone_t* node) { default_out(node); }
           virtual void tone_t_v  (tone_t* node);
    inline virtual void void_t_in (void_t* node) { default_in (node); }
    inline virtual void void_t_out(void_t* node) { default_out(node); }
           virtual void void_t_v  (void_t* node);
    inline virtual void array_t_in (array_t* node) { default_in (node); }
    inline virtual void array_t_out(array_t* node) { default_out(node); }
           virtual void array_t_v  (array_t* node);
    inline virtual void class_t_in (class_t* node) { default_in (node); }
    inline virtual void class_t_out(class_t* node) { default_out(node); }
           virtual void class_t_v  (class_t* node);
    inline virtual void m_button_e_in (m_button_e* node) { default_in (node); }
    inline virtual void m_button_e_out(m_button_e* node) { default_out(node); }
           virtual void m_button_e_v  (m_button_e* node);
    inline virtual void m_pixel_g_e_in (m_pixel_g_e* node) { default_in (node); }
    inline virtual void m_pixel_g_e_out(m_pixel_g_e* node) { default_out(node); }
           virtual void m_pixel_g_e_v  (m_pixel_g_e* node);
    inline virtual void m_aux_s_in (m_aux_s* node) { default_in (node); }
    inline virtual void m_aux_s_out(m_aux_s* node) { default_out(node); }
           virtual void m_aux_s_v  (m_aux_s* node);
    inline virtual void m_pixel_s_in (m_pixel_s* node) { default_in (node); }
    inline virtual void m_pixel_s_out(m_pixel_s* node) { default_out(node); }
           virtual void m_pixel_s_v  (m_pixel_s* node);
    inline virtual void m_tone_s_in (m_tone_s* node) { default_in (node); }
    inline virtual void m_tone_s_out(m_tone_s* node) { default_out(node); }
           virtual void m_tone_s_v  (m_tone_s* node);
    inline virtual void m_delay_s_in (m_delay_s* node) { default_in (node); }
    inline virtual void m_delay_s_out(m_delay_s* node) { default_out(node); }
           virtual void m_delay_s_v  (m_delay_s* node);
};
#endif

